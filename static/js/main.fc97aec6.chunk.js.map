{"version":3,"sources":["utils/Constants.js","components/ForkMeOnGithub.js","components/HowItWorks.js","components/JiraResults.js","components/JiraHolder.js","components/Navigation.js","App.js","reportWebVitals.js","index.js"],"names":["Constants","initialJiraValues","rowid","summary","description","priority","assignee","fixversion","devpriority","localStorageKey","ForkMeOnGitHub","className","href","data-ribbon","title","HowItWorks","JiraResults","props","showCopyDone","event","passOrFail","target","innerHTML","setTimeout","id","jiras","map","jira","Fragment","getResultLine","onClick","results","document","getElementById","replaceAll","input","createElement","body","appendChild","select","execCommand","removeChild","error","console","JiraHolder","useState","lastRowId","state","setState","useEffect","stateFromLocalStorage","localStorage","getItem","JSON","parse","resetRows","setItem","stringify","getJiraWithCustomRowId","customRowId","aJira","handleInputChanged","name","value","parseInt","parentNode","tempJiraStateHolder","i","length","onChange","autoFocus","rows","remainders","filter","deleteRow","push","Navigation","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fc97aec6.chunk.js","sourcesContent":["const Constants = {\r\n    initialJiraValues: {\r\n        rowid: \"\",\r\n        summary: \"\",\r\n        description: \"\",\r\n        priority: \"@inherit\",\r\n        assignee: \"@current\",\r\n        fixversion: \"@inherit\",\r\n        devpriority: \"@inherit\"\r\n    },\r\n    localStorageKey: \"jsc-state\"\r\n}\r\n\r\nexport default Constants;","import React from \"react\";\r\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\r\nimport \"../css/forkmeongithub.css\";\r\n\r\nconst ForkMeOnGitHub = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<a className=\"github-fork-ribbon right-bottom fixed\" href=\"https://github.com/anushibin007/jira-bulk-sub-task-creator\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\">\r\n\t\t\t\tFork me on GitHub\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ForkMeOnGitHub;\r\n","import React from \"react\";\r\n\r\nconst HowItWorks = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h5>How it works:</h5>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>Copy the text from the Results above</li>\r\n\t\t\t\t<li>Go to your parent JIRA</li>\r\n\t\t\t\t<li>Click on More â†’ Create multiple sub-tasks</li>\r\n\t\t\t\t<li>Paste the content you copied from this page above</li>\r\n\t\t\t\t<li>Click on \"Create Sub-Tasks\"</li>\r\n\t\t\t</ol>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default HowItWorks;\r\n","import React from \"react\";\r\n\r\nconst JiraResults = (props) => {\r\n\tconst getResultLine = (jira) => {\r\n\t\tif (jira.summary !== \"\") {\r\n\t\t\treturn (\r\n\t\t\t\t<React.Fragment key={jira.rowid}>\r\n\t\t\t\t\t- {jira.summary} / description:\"{jira.description}\" priority:\"\r\n\t\t\t\t\t{jira.priority}\" assignee:\"{jira.assignee}\" fixversion:\"\r\n\t\t\t\t\t{jira.fixversion}\" cfield:\"DevPriority:{jira.devpriority}\"\r\n\t\t\t\t\t<br />\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\tconst copyToClipboard = (event) => {\r\n\t\ttry {\r\n\t\t\t// Get the data that needs to be copied\r\n\t\t\tvar results = document.getElementById(\"results\").innerHTML;\r\n\t\t\t// Make sure to replace line breaks with newline character\r\n\t\t\tresults = results.replaceAll(\"<br>\", \"\\n\");\r\n\r\n\t\t\t// Only \"textarea\" and \"input\" fields can be \"selected\" for copying.\r\n\t\t\t// Hence, create a temp textarea element with our data and copy the data from it.\r\n\t\t\tvar input = document.createElement(\"textarea\");\r\n\t\t\tinput.innerHTML = results;\r\n\t\t\tdocument.body.appendChild(input);\r\n\t\t\tinput.select();\r\n\t\t\tdocument.execCommand(\"copy\");\r\n\t\t\tdocument.body.removeChild(input);\r\n\r\n\t\t\t// Show that the copy was successful\r\n\t\t\tshowCopyDone(event, true);\r\n\t\t} catch (error) {\r\n\t\t\t// If it failed, log the error and show an error prompt to the user\r\n\t\t\tconsole.error(error);\r\n\t\t\tshowCopyDone(event, false);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Updates the \"Copy\" button to give feedback to the user whether the copy passed or failed.\r\n\t *\r\n\t * @param {*} event\r\n\t * @param {*} passOrFail True if the copy was successful. False otherwise\r\n\t */\r\n\tconst showCopyDone = (event, passOrFail) => {\r\n\t\t// change text and the button color to show that copy was done/failed\r\n\t\tif (passOrFail) {\r\n\t\t\tevent.target.innerHTML = '<i class=\"bi bi-clipboard-check\"></i> Copied';\r\n\t\t\tevent.target.className = \"btn btn-success\";\r\n\t\t} else {\r\n\t\t\tevent.target.innerHTML = '<i class=\"bi bi-clipboard-x\"></i> Copy Failed';\r\n\t\t\tevent.target.className = \"btn btn-danger\";\r\n\t\t}\r\n\r\n\t\t// change it back to the old text and color after a second\r\n\t\tsetTimeout(() => {\r\n\t\t\tevent.target.innerHTML = '<i class=\"bi bi-clipboard-plus\"></i> Copy Results';\r\n\t\t\tevent.target.className = \"btn btn-primary\";\r\n\t\t}, 1000);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h5>Results:</h5>\r\n\t\t\t<code id=\"results\">{props.jiras.map((jira) => getResultLine(jira))}</code>\r\n\t\t\t<br />\r\n\t\t\t<p className=\"btn btn-primary\" onClick={copyToClipboard}>\r\n\t\t\t\t<i className=\"bi bi-clipboard-plus\"></i> Copy Results\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default JiraResults;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Constants from \"../utils/Constants\";\r\nimport ForkMeOnGitHub from \"./ForkMeOnGithub\";\r\nimport HowItWorks from \"./HowItWorks\";\r\nimport JiraResults from \"./JiraResults\";\r\n\r\nconst JiraHolder = () => {\r\n\t/**\r\n\t * The state consists of an array of jiras and the lastRowId used.\r\n\t */\r\n\tconst [state, setState] = useState({\r\n\t\tjiras: [],\r\n\t\tlastRowId: 0,\r\n\t});\r\n\r\n\t/**\r\n\t * On initial page load, check if the old state is cached in local storage.\r\n\t * If nothing is found there, just show one empty row by calling the \"reset\" function.\r\n\t */\r\n\tuseEffect(() => {\r\n\t\tconst stateFromLocalStorage = localStorage.getItem(Constants.localStorageKey);\r\n\t\tif (stateFromLocalStorage) {\r\n\t\t\tsetState(JSON.parse(stateFromLocalStorage));\r\n\t\t} else {\r\n\t\t\tresetRows();\r\n\t\t}\r\n\t}, []);\r\n\r\n\t/**\r\n\t * Store the state to the local storage whenever it changes.\r\n\t * If the browser session was closed or refreshed, the user can continue from where they left.\r\n\t */\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem(Constants.localStorageKey, JSON.stringify(state));\r\n\t});\r\n\r\n\t/**\r\n\t * Add a new row. The rowid of the new row will be one more than the lastrowId.\r\n\t * The new row will be filled with default values.\r\n\t */\r\n\tconst addRow = () => {\r\n\t\tconst rowid = state.lastRowId + 1;\r\n\t\tvar tempJiraStateHolder = state.jiras;\r\n\t\ttempJiraStateHolder.push(getJiraWithCustomRowId(rowid));\r\n\t\tsetState({\r\n\t\t\tjiras: tempJiraStateHolder,\r\n\t\t\tlastRowId: rowid,\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Deletes a row. The last row cannot be deleted.\r\n\t * When trying to delete the last row, an error message is shown.\r\n\t * @param {*} event\r\n\t * @param {*} rowid\r\n\t */\r\n\tconst deleteRow = (event, rowid) => {\r\n\t\tif (state.jiras.length > 1) {\r\n\t\t\t// filter out anything that does not match the provided rowid\r\n\t\t\tconst remainders = state.jiras.filter((jira) => jira.rowid !== rowid);\r\n\t\t\tsetState({\r\n\t\t\t\tjiras: remainders,\r\n\t\t\t\tlastRowId: state.lastRowId,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tevent.target.innerHTML = '<i class=\"bi bi-exclamation-circle\"></i> Cannot delete the only row';\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tevent.target.innerHTML = '<i class=\"bi bi-trash\"></i> Delete Row';\r\n\t\t\t}, 2000);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Clear the table and show only one row with default rows.\r\n\t */\r\n\tconst resetRows = () => {\r\n\t\tsetState({\r\n\t\t\tjiras: [getJiraWithCustomRowId(0)],\r\n\t\t\tlastRowId: 0,\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get  a JIRA JSON with customized rowid.\r\n\t * @param {*} customRowId\r\n\t * @returns\r\n\t */\r\n\tconst getJiraWithCustomRowId = (customRowId) => {\r\n\t\t// You need to clone the JSON object instead of making a reference to it using the \"=\" operator\r\n\t\tconst aJira = JSON.parse(JSON.stringify(Constants.initialJiraValues));\r\n\t\taJira.rowid = customRowId;\r\n\t\treturn aJira;\r\n\t};\r\n\r\n\t/**\r\n\t * This method handles any input change in the table.\r\n\t * The state JSON is updated accordingly based on the rowid, which we get from the id of the row.\r\n\t * @param {*} event\r\n\t */\r\n\tconst handleInputChanged = (event) => {\r\n\t\t// get the name and value of the field that was updated\r\n\t\tconst { name, value } = event.target;\r\n\r\n\t\t// rowid is stored as \"id\" in the <tr> element which has the input field\r\n\t\tconst rowid = parseInt(event.target.parentNode.parentNode.id);\r\n\r\n\t\t// update the value by matching the rowid\r\n\t\tvar tempJiraStateHolder = state.jiras;\r\n\t\tfor (var i = 0; i < tempJiraStateHolder.length; i++) {\r\n\t\t\tvar aJira = tempJiraStateHolder[i];\r\n\t\t\tif (aJira.rowid === rowid) {\r\n\t\t\t\taJira[name] = value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// update the state\r\n\t\tsetState({\r\n\t\t\tjiras: tempJiraStateHolder,\r\n\t\t\tlastRowId: state.lastRowId,\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"container w-100\">\r\n\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t<table id=\"jiraholdertable\" className=\"table table-bordered table-hover\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th className=\"text-center\">Jira Summary</th>\r\n\t\t\t\t\t\t\t<th className=\"text-center\">Description</th>\r\n\t\t\t\t\t\t\t<th className=\"text-center\">Priority</th>\r\n\t\t\t\t\t\t\t<th className=\"text-center\">Assignee</th>\r\n\t\t\t\t\t\t\t<th className=\"text-center\">Fix Version</th>\r\n\t\t\t\t\t\t\t<th className=\"text-center\">Dev Priority</th>\r\n\t\t\t\t\t\t\t<th className=\"text-center\">Deletions</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{state.jiras.map((jira) => (\r\n\t\t\t\t\t\t\t<tr key={jira.rowid} id={jira.rowid}>\r\n\t\t\t\t\t\t\t\t<td className=\"w-25\">\r\n\t\t\t\t\t\t\t\t\t<input className=\"form-control\" name=\"summary\" value={jira.summary} onChange={handleInputChanged} autoFocus></input>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td className=\"w-25\">\r\n\t\t\t\t\t\t\t\t\t<textarea className=\"form-control\" rows=\"1\" name=\"description\" value={jira.description} onChange={handleInputChanged}></textarea>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<select className=\"btn btn-secondary dropdown-toggle  w-100\" name=\"priority\" value={jira.priority} onChange={handleInputChanged}>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"@inherit\">Inherit</option>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"Blocker\">Blocker</option>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"Critical\">Critical</option>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"Major\">Major</option>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"Minor\">Minor</option>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"Trivial\">Trivial</option>\r\n\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<select className=\"btn btn-secondary dropdown-toggle  w-100\" name=\"assignee\" value={jira.assignee} onChange={handleInputChanged}>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"@current\">Me</option>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"@inherit\">Inherit</option>\r\n\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<select className=\"btn btn-secondary dropdown-toggle  w-100\" name=\"fixversion\" value={jira.fixversion} onChange={handleInputChanged}>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"@inherit\">Inherit</option>\r\n\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<select className=\"btn btn-secondary dropdown-toggle  w-100\" name=\"devpriority\" value={jira.devpriority} onChange={handleInputChanged}>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"@inherit\">Inherit</option>\r\n\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger w-100\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={function (event) {\r\n\t\t\t\t\t\t\t\t\t\t\tdeleteRow(event, jira.rowid);\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"bi bi-trash\"></i> Delete Row\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"d-flex flex-column\">\r\n\t\t\t\t<p className=\"btn btn-success float-right\" onClick={addRow}>\r\n\t\t\t\t\t<i className=\"bi bi-plus-circle\"></i> Add Sub-task\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"btn btn-warning float-right\" onClick={resetRows}>\r\n\t\t\t\t\t<i className=\"bi bi-x-octagon\"></i> Reset\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<JiraResults jiras={state.jiras} />\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<HowItWorks />\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<ForkMeOnGitHub />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default JiraHolder;\r\n","import \"../css/navbar.css\";\r\nimport React from \"react\";\r\n\r\nfunction Navigation() {\r\n\treturn (\r\n\t\t<nav className=\"navbar navbar-dark bg-dark\">\r\n\t\t\t<span className=\"navbar-brand\">Jira Bulk Subtask Creator</span>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default Navigation;\r\n","import \"./App.css\";\r\nimport JiraHolder from \"./components/JiraHolder\";\r\nimport Navigation from \"./components/Navigation\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Navigation />\r\n\t\t\t<JiraHolder />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}